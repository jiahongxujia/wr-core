How to minimize data size for ostree system upgrade

###### Background ######
The ostree is a git-like content-addressed object store, any new changes in
source code(CVE, bug fix) will generate a new commit in ostree repo after
pulsar rebuild. And on target, upgrade is required through ostree system,
due to network bandwidth limit, we should keep the transferred data have
a reasonable size.

The ostree is designed to implement fully atomic upgrades, it means only
changed atomic files in filesystem tree will be transferred during upgrade.
In order to minimize data size for ostree system upgrade, we should reduce
unnecessary file changes after each rebuild. Since files in filesystem tree
include all kinds of binaries, applications which are generated by recipe
rebuild, reducing unnecessary recipe rebuild could minimize data size.

Ideally, if no source code change, each rebuild will have the same output,
which is another topic of `Reproducible builds', if all recipes can be
reproducibly built, it will not have this doc. Although Yocto claim to
support it, but it is still on the way.
https://reproducible-builds.org/
https://wiki.yoctoproject.org/wiki/Reproducible_Builds

###### Reduce unnecessary rebuild triggered by dependency ######
Pulsar is based on Yocto. In current Yocto build system, any changes in
source code will trigger rebuild of its recipe, and all other recipes that
depend on it will also be rebuilt. If recipe is upgraded frequently, it is
necessary and correct, it could make sure all related recipes updated to
latest on one build.

But Pulsar is on a stable Wind River Linux release and the version of recipe
is rarely updated. In this situation, if recipes are ABI safe, Yocto provides
a var-SIGGEN_EXCLUDERECIPES_ABISAFE to remove dependencies from one recipe
on another.

The variable is a list of recipes that are completely stable and will never
change. Use of this variable is one way to remove dependencies from one recipe
on another that affect task signatures and thus force rebuilds when recipe
changes.

If you are boring to pick up recipe name to SIGGEN_EXCLUDERECIPES_ABISAFE one
by one, the var-SIGGEN_EXCLUDERECIPES_ABISAFE support `*' to match them all.

### Example ###
In this example, we require to apply CVE/bug fix patches to recipes of
libc and kernel frequently, and do not want to trigger target recipes
rebuild that depend on them.

1) Init environment and set var-SIGGEN_EXCLUDERECIPES_ABISAFE, add the
following setting to conf/local.conf:
...
SIGGEN_EXCLUDERECIPES_ABISAFE_append = " virtual/libc virtual/kernel"
...

2) Build image to generate sstate cache after SIGGEN_EXCLUDERECIPES_ABISAFE
setting

$ bitbake cube-gw-ostree-runtime

3) Apply CVE/bug fix patches to recipes of libc and kernel.

4) Rebuild image, glibc and kernel are built, target recipes that depend on
them are not.

$ bitbake cube-gw-ostree-runtime

5) If you want to remove all target recipes dependencies, have the following
set at step 1)
...
SIGGEN_EXCLUDERECIPES_ABISAFE_append = " *"
...

### Caution ###
1) If you add an inappropriate variable to this list (especially `*'), the
software might break at runtime if the interface of recipe was changed after
the other had been built.

In this situation, you need to clean up the sstate cache of affected recipe
manually, and rebuild image, the affected recipe will be rebuilt:
$ bitbake <affected-recipe-name> -ccleansstate
$ bitbake cube-gw-ostree-runtime

2) SIGGEN_EXCLUDERECIPES_ABISAFE works on target recipe, and do not remove
native/cross/nativesdk recipe dependencies any further. (Rebuild of native/
cross/nativesdk recipe do not affect ostree system upgrade)

3) Set SIGGEN_EXCLUDERECIPES_ABISAFE at first build, make sure the existed
sstate cache based on it.

https://www.yoctoproject.org/docs/2.0/ref-manual/ref-manual.html#var-SIGGEN_EXCLUDERECIPES_ABISAFE


###### Reduce unnecessary rebuild triggered by recipe modification ######
In above case, only the changed recipe will be rebuilt, in this section,
we provide a way to reduce rebuild even though recipe is changed which
is called `Locked Shared State'

By design, the Yocto build system builds everything from scratch unless
BitBake can determine that parts do not need to be rebuilt. The system
makes this decision based on a checksum of the input to any given task
and uses this as a digital signature. When using sstate cache, these
signatures are compared and any difference will cause the task to be rerun.
If we know that we want cached tasks to be used we can generate the needed
signatures and configure bitbake to use those specific caches, regardless
of any differences found.

### Generating Signatures ###
We should dump out the signature construction information (locked-sigs.inc)
from an existed build that Bitbake uses to determine if a task needs to be
rerun.

$ bitbake -S none cube-gw-ostree-runtime
|Writing locked sigs to path_to_build_dir/locked-sigs.inc

### Choose Tasks to Lock ###
As the locked-sigs.inc file implies, you will need to include this file
in your configuration if you wish to lock the SSTATE. You can do so by
simply in the local.conf file (e.g. include locked-sigs.inc). Once you
have done this, you will want to set the SIGGEN_LOCKEDSIGS_TASKSIG_CHECK
variable to warn in order to ignore any errors. Settings include "error"
and "warn", where error will stop the build and warn will not.

Rather than using the entire file, you can pick and choose which tasks
you wish to lock. For example, you may only need to copy a few tasks into
the local.conf file, here is the case of recipe initramfs-ostree-image:

SIGGEN_LOCKEDSIGS_t-intel-corei7-64 = "\
    initramfs-ostree-image:do_compile:1429a687226247dd5b54adfd2436617a \
    initramfs-ostree-image:do_configure:098d89a499f0b5358ea4954695b739ff \
    initramfs-ostree-image:do_fetch:f657e465d6ba1cbdc3ff95bfc97dd59f \
    initramfs-ostree-image:do_image:2c706f6cb099bc4392401f6a51361eb8 \
    initramfs-ostree-image:do_image_complete:098816a6c4ecf44d38190deacad5ab15 \
    initramfs-ostree-image:do_image_cpio:c34f07319ae10b2e61c3a87b59885904 \
    initramfs-ostree-image:do_image_qa:1744681ab186bf9d1430ed37a0edd45a \
    initramfs-ostree-image:do_install:b47228f683491adf89f7c11abcc9def1 \
    initramfs-ostree-image:do_package:646f73ea467b1be649e9cfd752bc0fb9 \
    initramfs-ostree-image:do_package_write_rpm:c034f34597bd75dc53da682dd0b951ad \
    initramfs-ostree-image:do_packagedata:ee1bbdea08cfec92ead77bef4d5ec097 \
    initramfs-ostree-image:do_patch:c60c4fab4d08c0bfe51458f0314363ba \
    initramfs-ostree-image:do_populate_lic:9ed9178cda4aeb0a49c3af505f0c6b87 \
    initramfs-ostree-image:do_prepare_recipe_sysroot:281cd883cc6d2e862dcbf2381bd94392 \
    initramfs-ostree-image:do_rootfs:7f9e9eff38b45c45c1e14f762d12db6b \
    initramfs-ostree-image:do_unpack:daf946d16da6a338fd0ded1793d49a27 \
    initramfs-ostree-image:do_write_qemuboot_conf:612b50c2ceb92719625c326bfb767e99 \
"
SIGGEN_LOCKEDSIGS_TYPES = "t-intel-corei7-64"
SIGGEN_LOCKEDSIGS_TASKSIG_CHECK = "warn"

### Example ###
1) Init environment and build image from scratch
$ . init-intel-x86-env

$ bitbake cube-gw-ostree-runtime

2) Dump out locked file
$ bitbake -S none cube-gw-ostree-runtime
|Writing locked sigs to path_to_build_dir/locked-sigs.inc

3) Add the following setting to conf/local.conf:
...
require ${TOPDIR}/locked-sigs.inc
SIGGEN_LOCKEDSIGS_TASKSIG_CHECK = "warn"
...

4) Modify recipe `initramfs-ostree-image' in meta-flatpak
which adds package `ed' to rootfs
--- a/recipes-core/images/initramfs-ostree-image.bb
+++ b/recipes-core/images/initramfs-ostree-image.bb
@@ -24,3 +24,5 @@ IMAGE_ROOTFS_SIZE = "8192"
 IMAGE_ROOTFS_EXTRA_SPACE = "0"
 
 BAD_RECOMMENDATIONS += "busybox-syslog"
+
+PACKAGE_INSTALL += "ed"

5) Nothing rebuild and some warnings
$ bitbake cube-gw-ostree-runtime
|WARNING: The initramfs-ostree-image:do_configure sig is computed to be
b4b60870ac87f1f716a455d160462f78, but the sig is locked to
098d89a499f0b5358ea4954695b739ff in SIGGEN_LOCKEDSIGS_t-intel-corei7-64

### Caution ###
If you require to build `initramfs-ostree-image' again, provide two methods:
# 1. Remove signatures of initramfs-ostree-image from locked-sigs.inc
$ sed -i "/ initramfs-ostree-image:/d" locked-sigs.inc

# 2. Add `initramfs-ostree-image' to var-SIGGEN_UNLOCKED_RECIPES
...
SIGGEN_UNLOCKED_RECIPES_append = " initramfs-ostree-image"
...

The rebuild of initramfs-ostree-image will trigger the rebuild
of cube-gw-ostree-runtime.
